import os
import sys
from PyQt5.QtCore import Qt, QSettings
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QListWidget, QLabel, QWidget, QPushButton,
    QFileDialog, QHBoxLayout, QLineEdit, QMessageBox
)
from pydub import AudioSegment
from mutagen.flac import FLAC
from mutagen.mp3 import MP3, EasyMP3
from mutagen.id3 import APIC, ID3
from mutagen.flac import Picture
import base64


class DragDropListWidget(QListWidget):
    def __init__(self, main_window, parent=None):
        super().__init__(parent)
        self.main_window = main_window
        self.setAcceptDrops(True)
        self.setDragDropMode(QListWidget.InternalMove)  # Enable reordering of items
        self.full_paths = []
        print("DragDropListWidget initialized and accepting drops.")

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls() or event.source() == self:
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.source() == self:  # Internal reordering
            super().dropEvent(event)
            self.update_full_paths_order()
        elif event.mimeData().hasUrls():  # External files dropped
            for url in event.mimeData().urls():
                file_path = url.toLocalFile()
                print(f"Dropped file: {file_path}")
                if file_path.lower().endswith(('.mp3', '.wav', '.flac', '.ape')):
                    print(f"Valid audio file: {file_path}")
                    parent_dir, file_name = self.extract_parent_and_file(file_path)
                    self.addItem(f"{parent_dir}/{file_name}")
                    self.full_paths.append(file_path)
                else:
                    print(f"Ignored invalid file: {file_path}")
            event.accept()
            print(f"Full paths after drop: {self.full_paths}")
            self.main_window.update_file_name_preview()
            self.main_window.update_combined_metadata()
        else:
            event.ignore()

    def update_full_paths_order(self):
        """Synchronize the order of self.full_paths with the reordered items."""
        reordered_paths = []
        for i in range(self.count()):
            item_text = self.item(i).text()
            for full_path in self.full_paths:
                if item_text in full_path:
                    reordered_paths.append(full_path)
                    break
        self.full_paths = reordered_paths
        print(f"Updated full paths order: {self.full_paths}")

        # Update the metadata and preview dynamically
        self.main_window.update_file_name_preview()
        self.main_window.update_combined_metadata()

    @staticmethod
    def extract_parent_and_file(file_path):
        parent_dir = os.path.basename(os.path.dirname(file_path))
        file_name = os.path.basename(file_path)
        return parent_dir, file_name


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Jam Merger")
        self.setGeometry(100, 100, 800, 600)
        self.settings = QSettings("JamMerger", "Settings")
        self.central_widget = QWidget()
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.addWidget(QLabel("Drag and drop audio files here, or use the 'Add Files' button:"))

        self.metadata_artwork_layout = QVBoxLayout()
        self.list_widget = DragDropListWidget(self)
        self.list_widget.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.list_widget.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.list_widget.setMinimumHeight(100)
        self.list_widget.setMaximumHeight(200)
        self.main_layout.addWidget(self.list_widget)
        self.main_layout.addWidget(self.list_widget)
        self.metadata_label = QLabel("Combined Metadata:")
        self.metadata_label.setWordWrap(True)
        self.album_art_label = QLabel()
        self.album_art_label.setFixedSize(100, 100)
        self.album_art_label.setStyleSheet("border: 1px solid gray;")
        self.album_art_label.setAlignment(Qt.AlignCenter)
        self.metadata_artwork_layout = QHBoxLayout()
        self.metadata_artwork_layout.addWidget(self.metadata_label)
        self.metadata_artwork_layout.addWidget(self.album_art_label)
        self.main_layout.addLayout(self.metadata_artwork_layout)
        self.metadata_artwork_layout = QHBoxLayout()
        self.metadata_artwork_layout.addWidget(self.metadata_label)
        self.metadata_artwork_layout.addWidget(self.album_art_label)
        self.main_layout.addLayout(self.metadata_artwork_layout)
        self.metadata_artwork_layout = QHBoxLayout()
        self.metadata_artwork_layout.addWidget(self.metadata_label)
        self.album_art_label.setFixedSize(100, 100)
        self.album_art_label.setStyleSheet("border: 1px solid gray;")
        self.album_art_label.setAlignment(Qt.AlignCenter)
        self.metadata_artwork_layout.addWidget(self.album_art_label)
        self.main_layout.addLayout(self.metadata_artwork_layout)
        self.metadata_artwork_layout = QHBoxLayout()
        self.metadata_artwork_layout.addWidget(self.metadata_label)
        self.metadata_artwork_layout.addWidget(self.album_art_label)
        self.main_layout.addLayout(self.metadata_artwork_layout)
        self.metadata_label.setWordWrap(True)

        self.file_name_preview_label = QLabel("Proposed File Name:")
        self.main_layout.addWidget(self.file_name_preview_label)
        self.file_name_preview_edit = QLineEdit()
        self.file_name_preview_edit.setPlaceholderText("File name preview will appear here...")
        self.main_layout.addWidget(self.file_name_preview_edit)

        self.add_files_button = QPushButton("Add Files")
        self.add_files_button.clicked.connect(self.open_file_dialog)
        self.main_layout.addWidget(self.add_files_button)

        self.clear_files_button = QPushButton("Clear Files")
        self.clear_files_button.clicked.connect(self.clear_files)
        self.main_layout.addWidget(self.clear_files_button)

        self.process_button = QPushButton("Process Files")
        self.process_button.clicked.connect(self.process_files)
        self.main_layout.addWidget(self.process_button)

        self.save_directory_button = QPushButton("Save to Directory")
        self.save_directory_button.clicked.connect(self.select_save_directory)
        self.main_layout.addWidget(self.save_directory_button)

        self.save_directory_label = QLabel("Save Directory: Not Selected")
        self.main_layout.addWidget(self.save_directory_label)

        self.list_widget.itemChanged.connect(self.update_file_name_preview)
        self.setCentralWidget(self.central_widget)
        self.load_last_directories()

    def open_file_dialog(self):
        last_dir = self.settings.value("last_add_files_dir", "")
        files, _ = QFileDialog.getOpenFileNames(self, "Select Audio Files", last_dir)
        if files:
            self.settings.setValue("last_add_files_dir", os.path.dirname(files[0]))
            for file in files:
                if file.lower().endswith(('.mp3', '.wav', '.flac', '.ape')):
                    parent_dir, file_name = DragDropListWidget.extract_parent_and_file(file)
                    self.list_widget.addItem(f"{parent_dir}/{file_name}")
                    self.list_widget.full_paths.append(file)
            self.update_file_name_preview()
            self.update_combined_metadata()

    def select_save_directory(self):
        last_dir = self.settings.value("last_save_directory", "")
        directory = QFileDialog.getExistingDirectory(self, "Select Save Directory", last_dir)
        if directory:
            self.settings.setValue("last_save_directory", directory)
            self.save_directory_label.setText(f"Save Directory: {directory}")

    def load_last_directories(self):
        last_save_directory = self.settings.value("last_save_directory", "")
        if last_save_directory:
            self.save_directory_label.setText(f"Save Directory: {last_save_directory}")

    def clear_files(self):
        self.list_widget.clear()
        self.list_widget.full_paths = []
        self.file_name_preview_edit.clear()
        self.album_art_label.clear()
        self.metadata_label.setText("Combined Metadata:")

    def update_file_name_preview(self):
        file_names = []
        for i in range(self.list_widget.count()):  # Access the list_widget explicitly
            item_text = self.list_widget.item(i).text()  # Use list_widget to get the item
            file_name = item_text.split("/")[-1].rsplit(".", 1)[0]
            file_names.append(file_name)
        self.update_album_art()
        proposed_name = " - ".join(file_names)
        self.file_name_preview_edit.setText(proposed_name)

    def update_combined_metadata(self):
        combined_titles = []
        artist, album, year, genre, album_artist = None, None, None, None, None
        for index, file_path in enumerate(self.list_widget.full_paths):
            try:
                if file_path.lower().endswith('.flac'):
                    audio_file = FLAC(file_path)
                    title = audio_file.get('title', [None])[0]
                    if index == 0:
                        artist = audio_file.get('artist', [None])[0]
                        album = audio_file.get('album', [None])[0]
                        year = audio_file.get('date', [None])[0]
                        genre = audio_file.get('genre', [None])[0]
                        album_artist = audio_file.get('albumartist', [None])[0]
                elif file_path.lower().endswith('.mp3'):
                    audio_file = MP3(file_path)
                    title = audio_file.get('TIT2', None)
                    if title:
                        title = title.text[0]
                    if index == 0:
                        artist = audio_file.get('TPE1', None)
                        if artist:
                            artist = artist.text[0]
                        album = audio_file.get('TALB', None)
                        if album:
                            album = album.text[0]
                        year = audio_file.get('TDRC', None)
                        if year:
                            year = str(year.text[0])
                        genre = audio_file.get('TCON', None)
                        if genre:
                            genre = genre.text[0]
                        album_artist = audio_file.get('TPE2', None)
                        if album_artist:
                            album_artist = album_artist.text[0]
                combined_titles.append(title or os.path.basename(file_path).rsplit(".", 1)[0])
            except Exception as e:
                print(f"Error reading metadata for {file_path}: {e}")
                combined_titles.append(os.path.basename(file_path).rsplit(".", 1)[0])
        combined_title = " ".join(combined_titles)
        artist = artist or "Unknown Artist"
        album = album or "Unknown Album"
        year = year or "Unknown Year"
        genre = genre or "Unknown Genre"
        album_artist = album_artist or "Unknown Album Artist"
        self.metadata_label.setText(
            f"Title: {combined_title}\n"
            f"Artist: {artist}\n"
            f"Album: {album}\n"
            f"Year: {year}\n"
            f"Genre: {genre}\n"
            f"Album Artist: {album_artist}"
        )
        self.update_album_art()

    def process_files(self):
        if self.list_widget.count() == 0:
            print("No files to process!")
            return
        save_directory = self.settings.value("last_save_directory", "")
        if not save_directory:
            print("Save directory not selected!")
            return
        proposed_file_name = self.file_name_preview_edit.text()
        if not proposed_file_name:
            print("Proposed file name is empty!")
            return
        first_file = self.list_widget.full_paths[0]
        file_extension = os.path.splitext(first_file)[1].lower()
        output_path = os.path.join(save_directory, proposed_file_name + file_extension)
        merged_audio = None
        album_art_data = None

        # Extract album art if available
        for file_path in self.list_widget.full_paths:
            try:
                if file_path.lower().endswith('.mp3'):
                    audio_file = MP3(file_path)
                    if "APIC:" in audio_file.tags:
                        album_art_data = audio_file.tags["APIC:"].data
                        album_art_mime = audio_file.tags["APIC:"].mime
                        break
                elif file_path.lower().endswith('.flac'):
                    audio_file = FLAC(file_path)
                    if "metadata_block_picture" in audio_file:
                        picture = Picture(base64.b64decode(audio_file["metadata_block_picture"][0]))
                        album_art_data = picture.data
                        album_art_mime = picture.mime
                        break
            except Exception as e:
                print(f"Error extracting album art from {file_path}: {e}")

        for file_path in self.list_widget.full_paths:
            try:
                audio = AudioSegment.from_file(file_path)
                if merged_audio is None:
                    merged_audio = audio
                else:
                    merged_audio += audio
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")
                return
        try:
            # Export the merged audio
            merged_audio.export(output_path, format=file_extension[1:])
            print(f"Merged file saved to: {output_path}")
        except Exception as e:
            print(f"Error exporting merged file: {e}")
            return
        try:
            # Add metadata with album art
            if file_extension == ".flac":
                merged_file = FLAC(output_path)
                merged_file["title"] = self.metadata_label.text().split("\n")[0].replace("Title: ", "")
                merged_file["artist"] = self.metadata_label.text().split("\n")[1].replace("Artist: ", "")
                merged_file["album"] = self.metadata_label.text().split("\n")[2].replace("Album: ", "")
                merged_file["date"] = self.metadata_label.text().split("\n")[3].replace("Year: ", "")
                merged_file["genre"] = self.metadata_label.text().split("\n")[4].replace("Genre: ", "")
                merged_file["albumartist"] = self.metadata_label.text().split("\n")[5].replace("Album Artist: ", "")

                if album_art_data:
                    picture.data = album_art_data
                    picture.type = 3  # Cover (front)
                    picture.mime = album_art_mime
                    picture.width = 150
                    picture.height = 150
                    picture.depth = 24
                    picture = Picture()
                    picture.data = album_art_data
                    picture.type = 3  # Cover (front)
                    picture.mime = album_art_mime
                    merged_file.add_picture(picture)

                merged_file.save()
            elif file_extension == ".mp3":
                merged_file = EasyMP3(output_path)
                merged_file["title"] = self.metadata_label.text().split("\n")[0].replace("Title: ", "")
                merged_file["artist"] = self.metadata_label.text().split("\n")[1].replace("Artist: ", "")
                merged_file["album"] = self.metadata_label.text().split("\n")[2].replace("Album: ", "")
                merged_file["date"] = self.metadata_label.text().split("\n")[3].replace("Year: ", "")
                merged_file["genre"] = self.metadata_label.text().split("\n")[4].replace("Genre: ", "")
                merged_file["albumartist"] = self.metadata_label.text().split("\n")[5].replace("Album Artist: ", "")

                if album_art_data:
                    id3_tags = ID3(output_path)
                    id3_tags.add(
                        APIC(
                            mime=album_art_mime,  # Use the extracted MIME type
                            type=3,  # Cover (front)
                            desc="Cover",
                            data=album_art_data,
                        )
                    )
                    id3_tags.save(v2_version=3)  # Save in ID3v2.3 format

        except Exception as e:
            print(f"Error adding metadata: {e}")
            return

        # Show success dialog
        self.show_success_dialog(output_path)

    def show_success_dialog(self, output_path):
        """Show a dialog box when the file is successfully processed."""
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Processing Complete")
        msg.setText("The merged file has been successfully created!")
        msg.setInformativeText(f"File saved to:\n{output_path}")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()




    def update_album_art(self):
        self.album_art_label.clear()
        album_art_data = None
        album_art_mime = None

        for file_path in self.list_widget.full_paths:
            try:
                if file_path.lower().endswith('.mp3'):
                    audio_file = MP3(file_path)
                    for tag in audio_file.tags.values():
                        if hasattr(tag, 'FrameID') and tag.FrameID == "APIC":
                            album_art_data = tag.data
                            album_art_mime = tag.mime
                            print(f"Found album art in MP3: {file_path}")
                            break
                elif file_path.lower().endswith('.flac'):
                    audio_file = FLAC(file_path)
                    if hasattr(audio_file, "pictures") and len(audio_file.pictures) > 0:
                        picture = audio_file.pictures[0]
                        album_art_data = picture.data
                        album_art_mime = picture.mime
                        print(f"Found album art in FLAC (via pictures[0]): {file_path}")
                        break
                    elif "metadata_block_picture" in audio_file:
                        try:
                            picture = Picture(base64.b64decode(audio_file["metadata_block_picture"][0]))
                        except Exception:
                            picture = Picture(audio_file["metadata_block_picture"][0].encode())
                        album_art_data = picture.data
                        album_art_mime = picture.mime
                        print(f"Found album art in FLAC (via metadata_block_picture): {file_path}")
                        break
            except Exception as e:
                print(f"Error extracting album art for preview from {file_path}: {e}")

        if album_art_data:
            image = QImage.fromData(album_art_data)
            if image.isNull():
                print("QImage could not load album art data — unsupported or corrupt image format.")
            else:
                pixmap = QPixmap.fromImage(image)
                pixmap = pixmap.scaled(self.album_art_label.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)
                self.album_art_label.setPixmap(pixmap)
        else:
            print("No album art found in any file.")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
